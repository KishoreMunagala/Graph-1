Time: O(m*n)
Space: O(m*n)

class Solution {
    public boolean hasPath(int [][] maze, int[] start, int[] destination) {
        
        if(start[0] == destination[0] && start[1] == destination[1]) return true;

        int m = maze.length;
        int n = maze[0].length;
        Queue<int []> q = new LinkedList<>();
        int [][] dirs = new int[][]{{-1,0},{1,0},{0,-1},{0,1}};
        
        q.add(new int []{start[0], start[1]});
        maze[start[0]][start[1]] = 2; 
        
        while(!q.isEmpty()) {
            int[] curr = q.poll();
            
            for(int[] dir : dirs) {
                int x = curr[0];
                int y = curr[1];
                
                while(x >= 0 && x < m && y >= 0 && y < n && maze[x][y] != 1) {
                    x += dir[0];
                    y += dir[1];
                }
                
                x -= dir[0];
                y -= dir[1];
                
                if(x == destination[0] && y == destination[1]) return true;
                
                if(maze[x][y] == 0) {
                    q.add(new int[]{x, y});
                    maze[x][y] = 2;  // Mark as visited
                }
            }
        }
        
       
        return false;
    }